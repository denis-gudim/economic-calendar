// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/denis-gudim/economic-calendar/issues",
            "email": "denis.gudim@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/countries": {
            "get": {
                "description": "Returns list of countries translated to specified language.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Countries"
                ],
                "summary": "Countries list by language code",
                "parameters": [
                    {
                        "type": "string",
                        "default": "en",
                        "description": "language code value",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.Country"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.InternalServerError"
                        }
                    }
                }
            }
        },
        "/events": {
            "get": {
                "description": "Returns event schedule list in dates diapasone",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Event schedule between dates",
                "parameters": [
                    {
                        "type": "string",
                        "description": "from date string in ISO 8601 format e.g. 2021-10-10",
                        "name": "from",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "to date string in ISO 8601 format e.g. 2021-10-10",
                        "name": "to",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "description": "language code value",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.Event"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.InternalServerError"
                        }
                    }
                }
            }
        },
        "/events/{eventId}": {
            "get": {
                "description": "Returns event details with last schedule information by specified identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Event details by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "event identifier",
                        "name": "eventId",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "default": "en",
                        "description": "language code value",
                        "name": "lang",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/data.EventDetails"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.BadRequestError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/httputil.NotFoundError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.InternalServerError"
                        }
                    }
                }
            }
        },
        "/events/{eventId}/history": {
            "get": {
                "description": "Returns event history list by event id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Event history by id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "event identifier",
                        "name": "eventId",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/data.EventRow"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/httputil.BadRequestError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/httputil.InternalServerError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "data.Country": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string",
                    "example": "RU"
                },
                "continentCode": {
                    "type": "string",
                    "example": "EU"
                },
                "currency": {
                    "type": "string",
                    "example": "RUB"
                },
                "id": {
                    "type": "integer",
                    "example": 56
                },
                "name": {
                    "type": "string",
                    "example": "Russian Federation"
                }
            }
        },
        "data.Event": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "number"
                },
                "code": {
                    "type": "string"
                },
                "eventId": {
                    "type": "integer"
                },
                "forecast": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "impactLevel": {
                    "type": "integer"
                },
                "previous": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "data.EventDetails": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "number"
                },
                "code": {
                    "type": "string"
                },
                "eventId": {
                    "type": "integer"
                },
                "forecast": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "impactLevel": {
                    "type": "integer"
                },
                "overview": {
                    "type": "string"
                },
                "previous": {
                    "type": "number"
                },
                "source": {
                    "type": "string"
                },
                "sourceUrl": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "type": "integer"
                },
                "unit": {
                    "type": "string"
                }
            }
        },
        "data.EventRow": {
            "type": "object",
            "properties": {
                "actual": {
                    "type": "number"
                },
                "eventId": {
                    "type": "integer"
                },
                "forecast": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "previous": {
                    "type": "number"
                },
                "timestamp": {
                    "type": "string"
                }
            }
        },
        "httputil.BadRequestError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "400 Bad Request: error details text"
                }
            }
        },
        "httputil.InternalServerError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 500
                },
                "message": {
                    "type": "string",
                    "example": "500 Internal Server Error"
                }
            }
        },
        "httputil.NotFoundError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 404
                },
                "message": {
                    "type": "string",
                    "example": "404 Not Found: error details text"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "/v1/",
	Schemes:     []string{},
	Title:       "Economic Calendar Example API",
	Description: "This is a sample economic calendar api",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
